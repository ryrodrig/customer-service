package com.cfgtest.services.customerservice.api.mappers;

import com.cfgtest.services.customerservice.dto.CustomerDTO;
import com.cfgtest.services.customerservice.model.Customer;
import com.cfgtest.services.customerservice.model.GeneralCustomer;
import com.cfgtest.services.customerservice.model.StudentCustomer;
import org.mapstruct.BeanMapping;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;

// mapper annotation tell mapstruct processor to create an implementation of the below interface.
@Mapper(uses = DateMapper.class)
public interface CustomerMapper {

//    Autogenerated code will map Customer to CustomerDTO
//    @Mapping(source = <srcField> , target =  <destName>) can be used if the field names do not
//    match

    // Mapstruct does not support inheritence.
    default CustomerDTO convertToCustomerDTO(Customer customer) {
        if(customer instanceof GeneralCustomer) {
            return convertGeneralCustomerToCustomerDTO((GeneralCustomer) customer);
        } else if(customer instanceof  StudentCustomer) {
            return convertStudentCustomerToCustomerDTO((StudentCustomer) customer);
        }
        return null;
    };

    CustomerDTO convertGeneralCustomerToCustomerDTO(GeneralCustomer customer);

    CustomerDTO convertStudentCustomerToCustomerDTO(StudentCustomer customer);

    default Customer convertToCustomer(CustomerDTO customerDTO) {
        if(customerDTO.getEmployed()) {
            return convertCustomerDTOToGeneralCustomer(customerDTO);
        } else {
            return convertCustomerDTOToStudentCustomer(customerDTO);
        }
    }

    GeneralCustomer convertCustomerDTOToGeneralCustomer(CustomerDTO customerDTO);

    StudentCustomer convertCustomerDTOToStudentCustomer(CustomerDTO customerDTO);

    //    @MappingTarget annotation updates an existing entity without creating a new one.
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    CustomerDTO updateCustomerDTO(Customer customer, @MappingTarget CustomerDTO currentCustomerDTO);
}
